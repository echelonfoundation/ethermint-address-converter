import{stripHexPrefix as e,isValidChecksumAddress as r,toChecksumAddress as o}from"crypto-addr-codec";import{decode as n,fromWords as c,encode as d,toWords as t}from"bech32";const l={decoder:o=>{const n=e(o);if(!r(o,null)&&n!==n.toLowerCase()&&n!==n.toUpperCase())throw Error("Invalid address checksum");return Buffer.from(e(o),"hex")},encoder:e=>o(e.toString("hex"),null),name:"ETH"};function u(e){return r=>d(e,t(r))}const f=(e,r)=>{return{decoder:(o=r,e=>{const{prefix:r,words:d}=n(e);if(r!==o)throw Error("Unrecognised address format");return Buffer.from(c(d))}),encoder:u(r),name:e};var o},s=f("echelonvaloper","echelonvaloper"),a=e=>{let r=l.decoder(e);return s.encoder(r)},h=e=>{let r=s.decoder(e);return l.encoder(r)},m=f("echelon","echelon"),i=e=>{let r=l.decoder(e);return m.encoder(r)},p=e=>{let r=m.decoder(e);return l.encoder(r)};export{m as ECH,s as ECHV,l as ETH,p as echelonToEth,h as echelonvToEth,i as ethToEchelon,a as ethToEchelonv};
//# sourceMappingURL=converter.modern.js.map
