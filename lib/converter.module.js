import{stripHexPrefix as e,isValidChecksumAddress as r,toChecksumAddress as o}from"crypto-addr-codec";import{decode as n,fromWords as t,encode as d,toWords as c}from"bech32";const u={decoder:o=>{const n=e(o);if(!r(o,null)&&n!==n.toLowerCase()&&n!==n.toUpperCase())throw Error("Invalid address checksum");return Buffer.from(e(o),"hex")},encoder:e=>o(e.toString("hex"),null),name:"ETH"};function f(e){return r=>d(e,c(r))}const s=(e,r)=>{return{decoder:(o=r,e=>{const{prefix:r,words:d}=n(e);if(r!==o)throw Error("Unrecognised address format");return Buffer.from(t(d))}),encoder:f(r),name:e};var o},l=s("ETHERMINT","ethm"),m=e=>{let r=u.decoder(e);return l.encoder(r)},a=e=>{let r=l.decoder(e);return u.encoder(r)},h=s("echelon","echelon"),i=e=>{let r=u.decoder(e);return h.encoder(r)},p=e=>{let r=h.decoder(e);return u.encoder(r)};export{h as ECH,u as ETH,l as ETHERMINT,p as echelonToEth,i as ethToEchelon,m as ethToEthermint,a as ethermintToEth};
//# sourceMappingURL=converter.module.js.map
